#!/usr/bin/env node --trace-warnings

// Checks values
const assert = require('assert')

// Item under test
let objHas

// Depending on cli arg require different version
if (process.argv[2] === 'latest') {
  objHas = require('../lib/objHas.js')
} else { objHas = require('../lib/.objHas.js') }

// Helper
const echo = (...args) => console.log(...args)

// Track Test runs and setup a test object
let tests = [], object

/* --------------- Sad Path --------------- */

// 1) Empty
object = {}
tests.push([objHas(object, 'robots', 'disallow'), false])

// 2) One Level (returns false)
object = { 'robots': undefined }
tests.push([objHas(object, 'robots', 'disallow'), false])

// 3) Two Level w/ undefined (returns false)
object = { 'robots': { 'disallow': undefined } }
tests.push([objHas(object, 'robots', 'disallow'), false])

// 4) Two Level w/ null (returns false)
object = { 'robots': { 'disallow': null } }
tests.push([objHas(object, 'robots', 'disallow'), false])

// 5) Two Level w/ empty string (returns false)
object = { 'robots': { 'disallow': "" } }
tests.push([objHas(object, 'robots', 'disallow'), false])

// 6) Two Level w/ number zero (returns false)
object = { 'robots': { 'disallow': 0 } }
tests.push([objHas(object, 'robots', 'disallow'), false])

/* --------------- Happy Path --------------- */

// 7) Two Level w/ empty array (returns true)
object = { 'robots': { 'disallow': [] } }
tests.push([objHas(object, 'robots', 'disallow'), true])

// 8) Two Level w/ array (returns true)
object = { 'robots': { 'disallow': ["one"] } }
tests.push([objHas(object, 'robots', 'disallow'), true])

// 9) Two Level w/ string (returns true)
object = { 'robots': { 'disallow': "one" } }
tests.push([objHas(object, 'robots', 'disallow'), true])

// 10) Two Level w/ number 1 (returns true)
object = { 'robots': { 'disallow': 1 } }
tests.push([objHas(object, 'robots', 'disallow'), true])

/* --------------- Check Results --------------- */

let actual, expect, pass = [], fail = []
tests.forEach((t, i) => {
  try {
    +([actual, expect] = t)
    assert.equal(actual, expect)
    pass.push(i)
  } catch (e) { fail.push(i) }
})

/* --------------- Output Test Results --------------- */

echo('---------------------------------------')
echo(`${pass.length} Passing Tests...`)
pass.forEach(i => echo(`- Test ${i+1} Passed`))
echo('---------------------------------------')
echo(`Failing tests: ${fail.length}`)
fail.forEach(i => echo(`- Test ${i+1} Failed`))
echo('---------------------------------------')
